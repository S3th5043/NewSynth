generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  apiKeys   ApiKey[]
  documents Document[]
  jobs      Job[]
  auditLogs AuditLog[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model ApiKey {
  id         String   @id @default(cuid())
  key        String   @unique
  name       String?
  role       ApiKeyRole @default(READER)
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  createdAt  DateTime @default(now())
  revokedAt  DateTime?
  lastUsedAt DateTime?
  rateLimitPerMin Int?
  metadata   Json?
  auditLogs  AuditLog[]
}

model Document {
  id         String   @id @default(cuid())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  text       String
  metadata   Json?
  embedding  Json?
  source     String?
  url        String?
  createdAt  DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  apiKey     ApiKey?  @relation(fields: [apiKeyId], references: [id])
  apiKeyId   String?
  path       String
  method     String
  status     Int
  tokensUsed Int?
  createdAt  DateTime @default(now())
}

model Job {
  id         String   @id @default(cuid())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  type       String
  status     JobStatus @default(QUEUED)
  progress   Int       @default(0)
  payload    Json
  error      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

enum ApiKeyRole {
  ADMIN
  WRITER
  READER
}

// NextAuth models
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   OrganizationMembership[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String                    @id @default(cuid())
  name        String
  createdAt   DateTime                  @default(now())
  memberships OrganizationMembership[]
  projects    Project[]
}

model OrganizationMembership {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  role           OrgRole       @default(MEMBER)
  createdAt      DateTime      @default(now())
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}
